//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TP1GED.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Classe> Classe { get; set; }
        public virtual DbSet<CompteJoueur> CompteJoueur { get; set; }
        public virtual DbSet<EffetItem> EffetItem { get; set; }
        public virtual DbSet<Heros> Heros { get; set; }
        public virtual DbSet<InventaireHero> InventaireHero { get; set; }
        public virtual DbSet<Item> Item { get; set; }
        public virtual DbSet<Monde> Monde { get; set; }
        public virtual DbSet<Monstre> Monstre { get; set; }
        public virtual DbSet<ObjetMonde> ObjetMonde { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> CreateHero(string nom, Nullable<int> comptJoueurID, Nullable<long> experience, Nullable<int> niveau, Nullable<int> x, Nullable<int> y, Nullable<decimal> argent, Nullable<int> str, Nullable<int> @int, Nullable<int> dex, Nullable<int> vitalite, Nullable<int> mondeId, Nullable<int> classe, Nullable<bool> estConnecte)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var comptJoueurIDParameter = comptJoueurID.HasValue ?
                new ObjectParameter("ComptJoueurID", comptJoueurID) :
                new ObjectParameter("ComptJoueurID", typeof(int));
    
            var experienceParameter = experience.HasValue ?
                new ObjectParameter("Experience", experience) :
                new ObjectParameter("Experience", typeof(long));
    
            var niveauParameter = niveau.HasValue ?
                new ObjectParameter("Niveau", niveau) :
                new ObjectParameter("Niveau", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("X", x) :
                new ObjectParameter("X", typeof(int));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("Y", y) :
                new ObjectParameter("Y", typeof(int));
    
            var argentParameter = argent.HasValue ?
                new ObjectParameter("Argent", argent) :
                new ObjectParameter("Argent", typeof(decimal));
    
            var strParameter = str.HasValue ?
                new ObjectParameter("Str", str) :
                new ObjectParameter("Str", typeof(int));
    
            var intParameter = @int.HasValue ?
                new ObjectParameter("Int", @int) :
                new ObjectParameter("Int", typeof(int));
    
            var dexParameter = dex.HasValue ?
                new ObjectParameter("Dex", dex) :
                new ObjectParameter("Dex", typeof(int));
    
            var vitaliteParameter = vitalite.HasValue ?
                new ObjectParameter("Vitalite", vitalite) :
                new ObjectParameter("Vitalite", typeof(int));
    
            var mondeIdParameter = mondeId.HasValue ?
                new ObjectParameter("MondeId", mondeId) :
                new ObjectParameter("MondeId", typeof(int));
    
            var classeParameter = classe.HasValue ?
                new ObjectParameter("Classe", classe) :
                new ObjectParameter("Classe", typeof(int));
    
            var estConnecteParameter = estConnecte.HasValue ?
                new ObjectParameter("EstConnecte", estConnecte) :
                new ObjectParameter("EstConnecte", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CreateHero", nomParameter, comptJoueurIDParameter, experienceParameter, niveauParameter, xParameter, yParameter, argentParameter, strParameter, intParameter, dexParameter, vitaliteParameter, mondeIdParameter, classeParameter, estConnecteParameter);
        }
    
        public virtual int DeleteHero(Nullable<int> heroID)
        {
            var heroIDParameter = heroID.HasValue ?
                new ObjectParameter("HeroID", heroID) :
                new ObjectParameter("HeroID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHero", heroIDParameter);
        }
    
        public virtual ObjectResult<byte[]> ItemConcurrence(Nullable<int> id, Nullable<bool> ramasse, byte[] rowVersion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var ramasseParameter = ramasse.HasValue ?
                new ObjectParameter("Ramasse", ramasse) :
                new ObjectParameter("Ramasse", typeof(bool));
    
            var rowVersionParameter = rowVersion != null ?
                new ObjectParameter("RowVersion", rowVersion) :
                new ObjectParameter("RowVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("ItemConcurrence", idParameter, ramasseParameter, rowVersionParameter);
        }
    
        public virtual ObjectResult<ReadHero_Result> ReadHero(string nom, Nullable<int> comptJoueurID, Nullable<long> experience, Nullable<int> niveau, Nullable<int> x, Nullable<int> y, Nullable<decimal> argent, Nullable<int> str, Nullable<int> @int, Nullable<int> dex, Nullable<int> vitalite, Nullable<int> mondeId, Nullable<int> classe, Nullable<int> heroID, Nullable<bool> estConnecte)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var comptJoueurIDParameter = comptJoueurID.HasValue ?
                new ObjectParameter("ComptJoueurID", comptJoueurID) :
                new ObjectParameter("ComptJoueurID", typeof(int));
    
            var experienceParameter = experience.HasValue ?
                new ObjectParameter("Experience", experience) :
                new ObjectParameter("Experience", typeof(long));
    
            var niveauParameter = niveau.HasValue ?
                new ObjectParameter("Niveau", niveau) :
                new ObjectParameter("Niveau", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("X", x) :
                new ObjectParameter("X", typeof(int));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("Y", y) :
                new ObjectParameter("Y", typeof(int));
    
            var argentParameter = argent.HasValue ?
                new ObjectParameter("Argent", argent) :
                new ObjectParameter("Argent", typeof(decimal));
    
            var strParameter = str.HasValue ?
                new ObjectParameter("Str", str) :
                new ObjectParameter("Str", typeof(int));
    
            var intParameter = @int.HasValue ?
                new ObjectParameter("Int", @int) :
                new ObjectParameter("Int", typeof(int));
    
            var dexParameter = dex.HasValue ?
                new ObjectParameter("Dex", dex) :
                new ObjectParameter("Dex", typeof(int));
    
            var vitaliteParameter = vitalite.HasValue ?
                new ObjectParameter("Vitalite", vitalite) :
                new ObjectParameter("Vitalite", typeof(int));
    
            var mondeIdParameter = mondeId.HasValue ?
                new ObjectParameter("MondeId", mondeId) :
                new ObjectParameter("MondeId", typeof(int));
    
            var classeParameter = classe.HasValue ?
                new ObjectParameter("Classe", classe) :
                new ObjectParameter("Classe", typeof(int));
    
            var heroIDParameter = heroID.HasValue ?
                new ObjectParameter("HeroID", heroID) :
                new ObjectParameter("HeroID", typeof(int));
    
            var estConnecteParameter = estConnecte.HasValue ?
                new ObjectParameter("EstConnecte", estConnecte) :
                new ObjectParameter("EstConnecte", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadHero_Result>("ReadHero", nomParameter, comptJoueurIDParameter, experienceParameter, niveauParameter, xParameter, yParameter, argentParameter, strParameter, intParameter, dexParameter, vitaliteParameter, mondeIdParameter, classeParameter, heroIDParameter, estConnecteParameter);
        }
    
        public virtual int UpdateHero(Nullable<int> heroID, string nom, Nullable<long> experience, Nullable<int> niveau, Nullable<int> x, Nullable<int> y, Nullable<decimal> argent, Nullable<int> str, Nullable<int> @int, Nullable<int> dex, Nullable<int> vitalite, Nullable<bool> estConnecte)
        {
            var heroIDParameter = heroID.HasValue ?
                new ObjectParameter("HeroID", heroID) :
                new ObjectParameter("HeroID", typeof(int));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var experienceParameter = experience.HasValue ?
                new ObjectParameter("Experience", experience) :
                new ObjectParameter("Experience", typeof(long));
    
            var niveauParameter = niveau.HasValue ?
                new ObjectParameter("Niveau", niveau) :
                new ObjectParameter("Niveau", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("X", x) :
                new ObjectParameter("X", typeof(int));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("Y", y) :
                new ObjectParameter("Y", typeof(int));
    
            var argentParameter = argent.HasValue ?
                new ObjectParameter("Argent", argent) :
                new ObjectParameter("Argent", typeof(decimal));
    
            var strParameter = str.HasValue ?
                new ObjectParameter("Str", str) :
                new ObjectParameter("Str", typeof(int));
    
            var intParameter = @int.HasValue ?
                new ObjectParameter("Int", @int) :
                new ObjectParameter("Int", typeof(int));
    
            var dexParameter = dex.HasValue ?
                new ObjectParameter("Dex", dex) :
                new ObjectParameter("Dex", typeof(int));
    
            var vitaliteParameter = vitalite.HasValue ?
                new ObjectParameter("Vitalite", vitalite) :
                new ObjectParameter("Vitalite", typeof(int));
    
            var estConnecteParameter = estConnecte.HasValue ?
                new ObjectParameter("EstConnecte", estConnecte) :
                new ObjectParameter("EstConnecte", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHero", heroIDParameter, nomParameter, experienceParameter, niveauParameter, xParameter, yParameter, argentParameter, strParameter, intParameter, dexParameter, vitaliteParameter, estConnecteParameter);
        }
    }
}
